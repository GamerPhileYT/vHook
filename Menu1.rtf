{\rtf1\ansi\ansicpg1252\cocoartf1504
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red69\green187\blue62;\red225\green226\blue231;\red199\green122\blue75;
\red211\green35\blue46;\red29\green169\blue162;\red215\green0\blue143;\red20\green156\blue146;\red37\green144\blue141;
}
{\*\expandedcolortbl;\csgray\c100000;\csgenericrgb\c26985\c73392\c24249;\csgenericrgb\c88217\c88535\c90427;\csgenericrgb\c78039\c47843\c29412;
\csgenericrgb\c82745\c13725\c18039;\csgenericrgb\c11560\c66089\c63506;\csgenericrgb\c84398\c0\c55980;\csgenericrgb\c7843\c61177\c57255;\csgenericrgb\c14440\c56530\c55465;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \CocoaLigature0 //\cf3 \
\cf2 //  menu.cpp\cf3 \
\cf2 //  vHook\cf3 \
\cf2 //\cf3 \
\
\cf4 #include \cf5 "menu.h"\cf4 \
\cf3 \
\cf6 cMenu\cf3 * menu = \cf7 new\cf3  \cf6 cMenu\cf3 ();\
\cf6 menuT\cf3  tab;\
\cf6 colors\cf3  col;\
\
\cf6 Color\cf3  ControlBackground = \cf6 Color\cf3 (\cf8 58\cf3 , \cf8 61\cf3 , \cf8 64\cf3 , \cf8 255\cf3 );\
\cf6 Color\cf3  ControlColor      = \cf6 Color\cf3 (\cf8 46\cf3 , \cf8 48\cf3 , \cf8 50\cf3 , \cf8 255\cf3 );\
\cf6 Color\cf3  MenuOrange        = \cf6 Color\cf3 (\cf8 255\cf3 , \cf8 136\cf3 , \cf8 57\cf3 , \cf8 255\cf3 );\
\cf6 Color\cf3  FontColor         = \cf6 Color\cf3 (\cf8 250\cf3 , \cf8 250\cf3 , \cf8 250\cf3 , \cf8 250\cf3 );\
\
\cf7 bool\cf3  WasPressed, WasReleased;\
\
\cf2 //=====================WasPressed=========================//\cf3 \
\
\cf7 auto\cf3  Pressed (\cf6 ButtonCode_t\cf3  code) -> \cf7 void\cf3  \{\
    \cf7 if\cf3  (\cf6 pInputSystem\cf3 ->\cf6 IsButtonDown\cf3 (code))\
    \{\
        \cf6 WasPressed\cf3  = \cf7 true\cf3 ;\
    \}\
    \cf7 else\cf3  \cf7 if\cf3  (!(\cf6 pInputSystem\cf3 ->\cf6 IsButtonDown\cf3 (code)))\
    \{\
        \cf7 if\cf3  (\cf6 WasPressed\cf3 )\
            \cf6 WasReleased\cf3  = \cf7 true\cf3 ;\
            \cf7 else\cf3 \
            \{\
                \cf6 WasReleased\cf3  = \cf7 false\cf3 ;\
            \}\
        \cf6 WasPressed\cf3  = \cf7 false\cf3 ;\
    \}\
\}\
\
\cf2 //==================Buttons and shit=====================//\cf3 \
\
\cf7 void\cf3  \cf6 cMenu\cf3 ::renderCheckbox(\cf7 int\cf3  x, \cf7 int\cf3  y, \cf7 bool\cf3  *var) \{\
    \
    \cf7 int\cf3  size = \cf8 20\cf3 ;\
    \
    \cf7 if\cf3  (*var)\
        \cf6 draw\cf3 ->\cf6 fillrgba\cf3 ( x, y, size, size, \cf6 MenuOrange\cf3  );\
    \
    \
    \cf7 if\cf3  (\cf6 draw\cf3 ->\cf6 inArea\cf3 (x, y, \cf8 20\cf3 , \cf8 20\cf3 )) \{\
        \cf7 if\cf3  (*var)\
            \cf6 draw\cf3 ->\cf6 fillrgba\cf3 ( x, y, size, size, \cf6 MenuOrange\cf3  );\
        \cf7 else\cf3 \
            \cf6 draw\cf3 ->\cf6 fillrgba\cf3 ( x, y, size, size, \cf6 Color\cf3 ( \cf8 255\cf3 , \cf8 136\cf3 , \cf8 57\cf3 , \cf8 100\cf3  ) );\
        \
        \cf7 if\cf3  (\cf6 WasReleased\cf3 )\
            *var = !*var;\
    \}\
    \
    \cf6 draw\cf3 ->\cf6 drawbox\cf3 (x, y, \cf8 20\cf3 , \cf8 20\cf3 , \cf6 MenuOrange\cf3 );\
    \
\}\
\
\cf7 void\cf3  \cf6 cMenu\cf3 ::renderSlider(\cf7 int\cf3  x, \cf7 int\cf3  y, \cf7 int\cf3  w, \cf7 const\cf3  \cf7 char\cf3 * szString, \cf7 int\cf3  &value, \cf7 int\cf3  max, \cf7 int\cf3  min) \{\
    \
    \cf7 int\cf3  h = \cf8 30\cf3 ;\
    \
    \cf7 int\cf3  curValue = value * ((\cf7 float\cf3 )w / (\cf7 float\cf3 )(max));\
    \
    \cf7 if\cf3  (\cf6 draw\cf3 ->\cf6 GetMouse\cf3 ().\cf6 x\cf3  > x - w / \cf8 2\cf3  && \cf6 draw\cf3 ->\cf6 GetMouse\cf3 ().\cf6 y\cf3  > y - \cf8 2\cf3  && \cf6 draw\cf3 ->\cf6 GetMouse\cf3 ().\cf6 x\cf3  < x + w + w / \cf8 2\cf3  && \cf6 draw\cf3 ->\cf6 GetMouse\cf3 ().\cf6 y\cf3  < y + h + \cf8 2\cf3 ) \{\
        \cf7 if\cf3  (\cf6 pInputSystem\cf3 ->\cf6 IsButtonDown\cf3 (\cf6 MOUSE_LEFT\cf3 )) \{\
            \
            value = (\cf6 draw\cf3 ->\cf6 CalcPos\cf3 (x) / ((\cf7 float\cf3 )w / (\cf7 float\cf3 )(max)));\
            \cf7 if\cf3  (value > max)\
                value = max;\
            \cf7 if\cf3  (value < min)\
                value = min;\
            \
        \}\
    \}\
    \
    \cf7 if\cf3 (w < \cf8 180\cf3  || w > \cf8 180\cf3 )\
        w = \cf8 180\cf3 ;\
    \
    \cf6 draw\cf3 ->\cf6 fillrgba\cf3 ( x, y + \cf8 5\cf3 , w + \cf8 2\cf3  , \cf8 15\cf3 , \cf6 ControlColor\cf3  );                        \cf2 // background\cf3 \
    \cf6 draw\cf3 ->\cf6 fillrgba\cf3 ( x, y + \cf8 5\cf3 , curValue, \cf8 15\cf3 , \cf6 MenuOrange\cf3  );                       \cf2 // Color till cursor\cf3 \
\
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + curValue - \cf8 5\cf3 , y + \cf8 5\cf3 , \cf6 Color\cf3 ::\cf6 White\cf3 (), \cf6 mFont2\cf3 , \cf9 to_string\cf3 (value).\cf9 c_str\cf3 ());\
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x, y - \cf8 8\cf3 , \cf6 Color\cf3 ::\cf6 White\cf3 (), \cf6 fontMenu\cf3 , szString);\
    \
\}\
\
\cf7 void\cf3  \cf6 cMenu\cf3 ::renderSlider(\cf7 int\cf3  x, \cf7 int\cf3  y, \cf7 int\cf3  w, \cf7 const\cf3  \cf7 char\cf3 * szString, \cf7 float\cf3  &value, \cf7 int\cf3  max, \cf7 int\cf3  min) \{\
    \
    \cf7 int\cf3  h = \cf8 15\cf3 ;\
    \
    \cf7 int\cf3  curValue = value * ((\cf7 float\cf3 )w / (\cf7 float\cf3 )(max));\
    \
    \cf7 if\cf3  (\cf6 draw\cf3 ->\cf6 GetMouse\cf3 ().\cf6 x\cf3  > x - w / \cf8 2\cf3  && \cf6 draw\cf3 ->\cf6 GetMouse\cf3 ().\cf6 y\cf3  > y - \cf8 2\cf3  && \cf6 draw\cf3 ->\cf6 GetMouse\cf3 ().\cf6 x\cf3  < x + w + w / \cf8 2\cf3  && \cf6 draw\cf3 ->\cf6 GetMouse\cf3 ().\cf6 y\cf3  < y + h + \cf8 2\cf3 ) \{\
        \cf7 if\cf3  (\cf6 pInputSystem\cf3 ->\cf6 IsButtonDown\cf3 (\cf6 MOUSE_LEFT\cf3 )) \{\
            \
            value = (\cf6 draw\cf3 ->\cf6 CalcPos\cf3 (x) / ((\cf7 float\cf3 )w / (\cf7 float\cf3 )(max)));\
            \cf7 if\cf3  (value > max)\
                value = max;\
            \cf7 if\cf3  (value < min)\
                value = min;\
            \
        \}\
    \}\
    \
    \cf7 if\cf3 (w < \cf8 180\cf3  || w > \cf8 180\cf3 )\
        w = \cf8 180\cf3 ;\
    \
    \cf6 draw\cf3 ->\cf6 fillrgba\cf3 ( x, y + \cf8 5\cf3 , w + \cf8 2\cf3  , \cf8 15\cf3 , \cf6 ControlColor\cf3  );                       \cf2 // background\cf3 \
    \cf6 draw\cf3 ->\cf6 fillrgba\cf3 ( x, y + \cf8 5\cf3 , curValue, \cf8 15\cf3 , \cf6 MenuOrange\cf3  );                       \cf2 // Color till cursor\cf3 \
    \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + curValue - \cf8 5\cf3 , y + \cf8 5\cf3 , \cf6 Color\cf3 ::\cf6 White\cf3 (), \cf6 mFont2\cf3 , \cf9 to_string\cf3 (value).\cf9 c_str\cf3 ());\
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x, y - \cf8 8\cf3 , \cf6 Color\cf3 ::\cf6 White\cf3 (), \cf6 fontMenu\cf3 , szString);\
    \
\}\
\
\cf7 void\cf3  \cf6 cMenu\cf3 ::renderCombo(\cf7 int\cf3  x, \cf7 int\cf3  y, \cf7 int\cf3  w, \cf7 int\cf3  h, \cf7 const\cf3  \cf7 char\cf3 * szString, \cf9 vector\cf3 <\cf9 string\cf3 > szValue, \cf7 int\cf3 & currValue, \cf7 bool\cf3 * bOpend) \{\
    \
    \cf7 int\cf3  Y = y + h;\
    \
    \cf7 if\cf3 (\cf6 draw\cf3 ->\cf6 inArea\cf3 (x, y, w, h)) \{\
        \cf7 if\cf3 (\cf6 WasReleased\cf3 ) \{\
            *bOpend = !*bOpend;\
        \}\
    \}\
    \
    \cf7 if\cf3  (*bOpend) \{\
        \
        \cf7 for\cf3  ( \cf7 int\cf3  i = \cf8 0\cf3 ; i < szValue.\cf9 size\cf3 (); i++ ) \{\
            \
            \cf7 auto\cf3  bHover = \cf6 draw\cf3 ->\cf6 inArea\cf3 (x, Y + \cf8 2\cf3  + ( i * \cf8 20\cf3  ), w, \cf8 18\cf3 );\
            \
            \cf6 draw\cf3 ->\cf6 fillrgba\cf3 ( x, Y + \cf8 2\cf3  + ( i * \cf8 20\cf3  ), w, \cf8 18\cf3 , bHover ? \cf6 Color\cf3 ( \cf8 255\cf3 , \cf8 136\cf3 , \cf8 57\cf3 , \cf8 150\cf3  ) : \cf6 ControlColor\cf3  );\
            \cf6 draw\cf3 ->\cf6 drawboxoutline\cf3 ( x, Y + \cf8 2\cf3  + ( i * \cf8 20\cf3  ), w, \cf8 18\cf3 , \cf6 Color\cf3 ( \cf8 90\cf3 , \cf8 90\cf3 , \cf8 90\cf3 , \cf8 255\cf3  ) );\
            \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 5\cf3 , Y + \cf8 3\cf3  + (i*\cf8 20\cf3 ), \cf6 Color\cf3 ::\cf6 White\cf3 (), \cf6 fontMenu\cf3 , szValue[\cf9 i\cf3 ].\cf9 c_str\cf3 ());\
            \
            \cf7 if\cf3  (\cf6 draw\cf3 ->\cf6 inArea\cf3 (x, Y + \cf8 2\cf3  + ( i * \cf8 20\cf3  ), w, \cf8 18\cf3 )) \{\
                \cf7 if\cf3 (\cf6 WasPressed\cf3 )\{\
                    currValue = i;\
                    *bOpend = \cf7 false\cf3 ;\
                \}\
            \}\
        \}\
    \}\
    \
    \cf7 if\cf3 (currValue == \cf8 0\cf3 )\
        szString = szString;\
    \cf7 else\cf3 \
        szString = szValue[\cf9 currValue\cf3 ].\cf9 c_str\cf3 ();\
    \
    \cf2 // Draws the box\cf3 \
    \cf6 draw\cf3 ->\cf6 fillrgba\cf3 ( x, y, w, h, \cf6 ControlColor\cf3  );\
    \cf6 draw\cf3 ->\cf6 fillrgba\cf3 ( x + w - h, y, h, h, \cf6 ControlBackground\cf3  );\
    \cf6 draw\cf3 ->\cf6 drawboxoutline\cf3 ( x, y, w, h, \cf6 MenuOrange\cf3  );\
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 5\cf3 , y + (h/\cf8 2\cf3 ) - \cf8 7\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , szString);\
    \
    \
    \cf7 if\cf3  (!*bOpend)\
    \{\
        \cf2 // draw arrow pointing down\cf3 \
        \cf6 draw\cf3 ->\cf6 fillrgba\cf3 ( ( x + w - h + \cf8 113\cf3  - \cf8 107\cf3  ), ( y + \cf8 8\cf3  ), \cf8 1\cf3 , \cf8 1\cf3 , \cf6 Color\cf3 ( \cf8 255\cf3 , \cf8 255\cf3 , \cf8 255\cf3 , \cf8 255\cf3  ) );\
        \cf6 draw\cf3 ->\cf6 fillrgba\cf3 ( ( x + w - h + \cf8 114\cf3  - \cf8 107\cf3  ), ( y + \cf8 8\cf3  ), \cf8 1\cf3 , \cf8 2\cf3 , \cf6 Color\cf3 ( \cf8 255\cf3 , \cf8 255\cf3 , \cf8 255\cf3 , \cf8 255\cf3  ) );\
        \cf6 draw\cf3 ->\cf6 fillrgba\cf3 ( ( x + w - h + \cf8 115\cf3  - \cf8 107\cf3  ), ( y + \cf8 8\cf3  ), \cf8 1\cf3 , \cf8 3\cf3 , \cf6 Color\cf3 ( \cf8 255\cf3 , \cf8 255\cf3 , \cf8 255\cf3 , \cf8 255\cf3  ) );\
        \cf6 draw\cf3 ->\cf6 fillrgba\cf3 ( ( x + w - h + \cf8 116\cf3  - \cf8 107\cf3  ), ( y + \cf8 8\cf3  ), \cf8 1\cf3 , \cf8 4\cf3 , \cf6 Color\cf3 ( \cf8 255\cf3 , \cf8 255\cf3 , \cf8 255\cf3 , \cf8 255\cf3  ) );\
        \cf6 draw\cf3 ->\cf6 fillrgba\cf3 ( ( x + w - h + \cf8 117\cf3  - \cf8 107\cf3  ), ( y + \cf8 8\cf3  ), \cf8 1\cf3 , \cf8 3\cf3 , \cf6 Color\cf3 ( \cf8 255\cf3 , \cf8 255\cf3 , \cf8 255\cf3 , \cf8 255\cf3  ) );\
        \cf6 draw\cf3 ->\cf6 fillrgba\cf3 ( ( x + w - h + \cf8 118\cf3  - \cf8 107\cf3  ), ( y + \cf8 8\cf3  ), \cf8 1\cf3 , \cf8 2\cf3 , \cf6 Color\cf3 ( \cf8 255\cf3 , \cf8 255\cf3 , \cf8 255\cf3 , \cf8 255\cf3  ) );\
        \cf6 draw\cf3 ->\cf6 fillrgba\cf3 ( ( x + w - h + \cf8 119\cf3  - \cf8 107\cf3  ), ( y + \cf8 8\cf3  ), \cf8 1\cf3 , \cf8 1\cf3 , \cf6 Color\cf3 ( \cf8 255\cf3 , \cf8 255\cf3 , \cf8 255\cf3 , \cf8 255\cf3  ) );\
    \}\
    \cf7 else\cf3 \
    \{\
        \cf2 // draw arrow pointing up\cf3 \
        \cf6 draw\cf3 ->\cf6 fillrgba\cf3 ( ( x + w - h + \cf8 113\cf3  - \cf8 107\cf3  ), ( y + \cf8 11\cf3  ), \cf8 1\cf3 , \cf8 1\cf3 , \cf6 Color\cf3 ( \cf8 255\cf3 , \cf8 255\cf3 , \cf8 255\cf3 , \cf8 255\cf3  ) );\
        \cf6 draw\cf3 ->\cf6 fillrgba\cf3 ( ( x + w - h + \cf8 114\cf3  - \cf8 107\cf3  ), ( y + \cf8 10\cf3  ), \cf8 1\cf3 , \cf8 2\cf3 , \cf6 Color\cf3 ( \cf8 255\cf3 , \cf8 255\cf3 , \cf8 255\cf3 , \cf8 255\cf3  ) );\
        \cf6 draw\cf3 ->\cf6 fillrgba\cf3 ( ( x + w - h + \cf8 115\cf3  - \cf8 107\cf3  ), ( y + \cf8 9\cf3  ), \cf8 1\cf3 , \cf8 3\cf3 , \cf6 Color\cf3 ( \cf8 255\cf3 , \cf8 255\cf3 , \cf8 255\cf3 , \cf8 255\cf3  ) );\
        \cf6 draw\cf3 ->\cf6 fillrgba\cf3 ( ( x + w - h + \cf8 116\cf3  - \cf8 107\cf3  ), ( y + \cf8 8\cf3  ), \cf8 1\cf3 , \cf8 4\cf3 , \cf6 Color\cf3 ( \cf8 255\cf3 , \cf8 255\cf3 , \cf8 255\cf3 , \cf8 255\cf3  ) );\
        \cf6 draw\cf3 ->\cf6 fillrgba\cf3 ( ( x + w - h + \cf8 117\cf3  - \cf8 107\cf3  ), ( y + \cf8 9\cf3  ), \cf8 1\cf3 , \cf8 3\cf3 , \cf6 Color\cf3 ( \cf8 255\cf3 , \cf8 255\cf3 , \cf8 255\cf3 , \cf8 255\cf3  ) );\
        \cf6 draw\cf3 ->\cf6 fillrgba\cf3 ( ( x + w - h + \cf8 118\cf3  - \cf8 107\cf3  ), ( y + \cf8 10\cf3  ), \cf8 1\cf3 , \cf8 2\cf3 , \cf6 Color\cf3 ( \cf8 255\cf3 , \cf8 255\cf3 , \cf8 255\cf3 , \cf8 255\cf3  ) );\
        \cf6 draw\cf3 ->\cf6 fillrgba\cf3 ( ( x + w - h + \cf8 119\cf3  - \cf8 107\cf3  ), ( y + \cf8 11\cf3  ), \cf8 1\cf3 , \cf8 1\cf3 , \cf6 Color\cf3 ( \cf8 255\cf3 , \cf8 255\cf3 , \cf8 255\cf3 , \cf8 255\cf3  ) );\
    \}\
\}\
\
\cf7 void\cf3  \cf6 cMenu\cf3 ::renderButton(\cf7 int\cf3  x, \cf7 int\cf3  y, \cf7 int\cf3  w, \cf7 int\cf3  h, \cf7 const\cf3  \cf7 char\cf3 * szString) \{\
    \
    \cf6 draw\cf3 ->\cf6 RectOutlined\cf3 (x, y, w, h, \cf8 1\cf3 , \cf6 ControlColor\cf3 , \cf6 MenuOrange\cf3 );\
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 20\cf3 , y + \cf8 3\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , szString);\
    \
\}\
\
\
\
\cf7 void\cf3  \cf6 cMenu\cf3 ::Border(\cf7 int\cf3  x, \cf7 int\cf3  y, \cf7 int\cf3  thickness, \cf7 const\cf3  \cf7 char\cf3 * str) \{\
    \
    x = x + \cf8 100\cf3  + \cf8 10\cf3 ;\
    y = y + \cf8 30\cf3 ;\
    \
    \cf6 draw\cf3 ->\cf6 drawline\cf3 (x, y, x + \cf8 290\cf3 , y, \cf6 MenuOrange\cf3 ); \cf2 // Top line\cf3 \
    \cf6 draw\cf3 ->\cf6 drawline\cf3 (x, y, x, y + \cf8 170\cf3 , \cf6 MenuOrange\cf3 ); \cf2 // Left line\cf3 \
    \cf6 draw\cf3 ->\cf6 drawline\cf3 (x, y + \cf8 170\cf3 , x + \cf8 290\cf3 , y + \cf8 170\cf3 , \cf6 MenuOrange\cf3 ); \cf2 // Bottom Line\cf3 \
    \cf6 draw\cf3 ->\cf6 drawline\cf3 (x + \cf8 290\cf3 , y, x + \cf8 290\cf3 , y + \cf8 170\cf3 , \cf6 MenuOrange\cf3 ); \cf2 // Right line\cf3 \
    \
\}\
\
\cf2 //=====================Menu Tabs=========================//\cf3 \
\
\cf7 enum\cf3  cTabs\
\{\
    Null    = \cf8 0\cf3 ,\
    AimTab  = \cf8 1\cf3 ,\
    VisTab  = \cf8 2\cf3 ,\
    MiscTab = \cf8 3\cf3 ,\
    PlayerTab = \cf8 4\cf3 ,\
\};\
\
\cf7 void\cf3  \cf6 cMenu\cf3 ::renderAim(\cf7 int\cf3  x, \cf7 int\cf3  y, \cf7 int\cf3  w, \cf7 int\cf3  h) \{\
    \
    \cf6 draw\cf3 ->\cf6 RectOutlined\cf3 (x, y, w, h, \cf8 1\cf3 , \cf6 ControlColor\cf3 , \cf6 MenuOrange\cf3 ); \cf2 // Draws Window\cf3 \
    \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 80\cf3 , y + \cf8 1\cf3 , \cf6 FontColor\cf3 , \cf6 mFont\cf3 , \cf5 "Aimbot"\cf3 );\
    \cf6 draw\cf3 ->\cf6 drawline\cf3 (x, y + \cf8 20\cf3 , x + \cf8 200\cf3 , y + \cf8 20\cf3 , \cf6 MenuOrange\cf3 );\
    \
    \
    \cf7 if\cf3 (\cf6 tab\cf3 .\cf6 aimtype\cf3  == \cf8 0\cf3 ) \{ \cf2 // Legit\cf3 \
    \
        \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 10\cf3 , y + \cf8 25\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Enabled"\cf3 );\
        \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 170\cf3 , y + \cf8 25\cf3 , &\cf6 vars\cf3 .\cf6 aimbot\cf3 .\cf6 enabled\cf3 );\
    \
        \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 10\cf3 , y + \cf8 50\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Smoothing"\cf3 );\
        \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 170\cf3 , y + \cf8 50\cf3 , &\cf6 vars\cf3 .\cf6 aimbot\cf3 .\cf6 smooth\cf3 );\
    \
        \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 10\cf3 , y + \cf8 75\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "RCS"\cf3 );\
        \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 170\cf3 , y + \cf8 75\cf3 , &\cf6 vars\cf3 .\cf6 aimbot\cf3 .\cf6 rcs\cf3 );\
    \
        \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 10\cf3 , y + \cf8 100\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Trigger"\cf3 );\
        \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 170\cf3 , y + \cf8 100\cf3 , &\cf6 vars\cf3 .\cf6 aimbot\cf3 .\cf6 trigger\cf3 );\
    \
        \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 10\cf3 , y + \cf8 125\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Auto Wall"\cf3 );\
        \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 170\cf3 , y + \cf8 125\cf3 , &\cf6 vars\cf3 .\cf6 aimbot\cf3 .\cf6 autowall\cf3 );\
    \
    \
        \cf7 this\cf3 ->\cf6 renderSlider\cf3 (x + \cf8 10\cf3 , y + \cf8 155\cf3 , \cf8 180\cf3 , \cf5 "Bone"\cf3 , \cf6 vars\cf3 .\cf6 aimbot\cf3 .\cf6 bone\cf3 , \cf8 20\cf3 , \cf8 0\cf3 );\
        \cf7 this\cf3 ->\cf6 renderSlider\cf3 (x + \cf8 10\cf3 , y + \cf8 180\cf3 , \cf8 180\cf3 , \cf5 "Fov"\cf3 , \cf6 vars\cf3 .\cf6 aimbot\cf3 .\cf6 fov\cf3 , \cf8 180\cf3 , \cf8 0\cf3 );\
        \cf7 this\cf3 ->\cf6 renderSlider\cf3 (x + \cf8 10\cf3 , y + \cf8 205\cf3 , \cf8 180\cf3 , \cf5 "Smoothing Factor"\cf3 , \cf6 vars\cf3 .\cf6 aimbot\cf3 .\cf6 smoothf\cf3 , \cf8 1.f\cf3 , \cf8 0.f\cf3 );\
        \cf7 this\cf3 ->\cf6 renderSlider\cf3 (x + \cf8 10\cf3 , y + \cf8 230\cf3 , \cf8 180\cf3 , \cf5 "RCS Factor"\cf3 , \cf6 vars\cf3 .\cf6 aimbot\cf3 .\cf6 rcslevel\cf3 , \cf8 100.f\cf3 , \cf8 0.f\cf3 );\
    \
    \}\
    \
    \cf7 if\cf3 (\cf6 tab\cf3 .\cf6 aimtype\cf3  == \cf8 1\cf3 ) \{\
        \
        \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 10\cf3 , y + \cf8 25\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Silent"\cf3 );\
        \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 170\cf3 , y + \cf8 25\cf3 , &\cf6 vars\cf3 .\cf6 aimbot\cf3 .\cf6 silent\cf3 );\
    \
        \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 10\cf3 , y + \cf8 50\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Auto Shoot"\cf3 );\
        \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 170\cf3 , y + \cf8 50\cf3 , &\cf6 vars\cf3 .\cf6 aimbot\cf3 .\cf6 autoshoot\cf3 );\
        \
        \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 10\cf3 , y + \cf8 75\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Auto Pistol"\cf3 );\
        \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 170\cf3 , y + \cf8 75\cf3 , &\cf6 vars\cf3 .\cf6 aimbot\cf3 .\cf6 autopistol\cf3 );\
        \
        \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 10\cf3 , y + \cf8 100\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Auto Stop"\cf3 );\
        \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 170\cf3 , y + \cf8 100\cf3 , &\cf6 vars\cf3 .\cf6 aimbot\cf3 .\cf6 autostop\cf3 );\
        \
        \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 10\cf3 , y + \cf8 125\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Auto Crouch"\cf3 );\
        \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 170\cf3 , y + \cf8 125\cf3 , &\cf6 vars\cf3 .\cf6 aimbot\cf3 .\cf6 autocrouch\cf3 );\
        \
        \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 10\cf3 , y + \cf8 150\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Auto Wall"\cf3 );\
        \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 170\cf3 , y + \cf8 150\cf3 , &\cf6 vars\cf3 .\cf6 aimbot\cf3 .\cf6 autowall\cf3 );\
\
        \cf7 this\cf3 ->\cf6 renderSlider\cf3 (x + \cf8 10\cf3 , y + \cf8 180\cf3 , \cf8 180\cf3 , \cf5 "Pointscale"\cf3 , \cf6 vars\cf3 .\cf6 aimbot\cf3 .\cf6 pointscale\cf3 , \cf8 100\cf3 , \cf8 0\cf3 );\
        \
        \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 10\cf3 , y + \cf8 205\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Anti Aim"\cf3 );\
        \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 170\cf3 , y + \cf8 205\cf3 , &\cf6 vars\cf3 .\cf6 misc\cf3 .\cf6 anitaim\cf3 );\
        \
    \}\
    \
    \
    \cf9 vector\cf3 <\cf9 string\cf3 > aim;\
    \
    aim.\cf9 push_back\cf3 (\cf5 "Legit"\cf3 );\
    aim.\cf9 push_back\cf3 (\cf5 "Rage"\cf3 );\
    \
    \cf7 this\cf3 ->\cf6 renderCombo\cf3 (x + \cf8 50\cf3 , y + \cf8 260\cf3 , \cf8 100\cf3 , \cf8 20\cf3 , \cf5 "Legit"\cf3 , aim, \cf6 tab\cf3 .\cf6 aimtype\cf3 , &\cf6 vars\cf3 .\cf6 aim_opend\cf3 );\
    \
    \
    \cf7 if\cf3 (\cf6 tab\cf3 .\cf6 aimtype\cf3  == \cf8 1\cf3 )\
        \cf6 tab\cf3 .\cf6 aatab\cf3  = \cf7 true\cf3 ;\
    \cf7 else\cf3 \
        \cf6 tab\cf3 .\cf6 aatab\cf3  = \cf7 false\cf3 ;\
    \
 \
\}\
\
\cf7 void\cf3  \cf6 cMenu\cf3 ::renderVis(\cf7 int\cf3  x, \cf7 int\cf3  y, \cf7 int\cf3  w, \cf7 int\cf3  h) \{\
    \
    \cf9 vector\cf3 <\cf9 string\cf3 > chamsvector, handsvector, colorsvector;\
    \
    chamsvector.\cf9 push_back\cf3 (\cf5 "Lit"\cf3 );\
    chamsvector.\cf9 push_back\cf3 (\cf5 "Texture"\cf3 );\
    \
    handsvector.\cf9 push_back\cf3 (\cf5 "Lit"\cf3 );\
    handsvector.\cf9 push_back\cf3 (\cf5 "Texture"\cf3 );\
    handsvector.\cf9 push_back\cf3 (\cf5 "Wireframe"\cf3 );\
    handsvector.\cf9 push_back\cf3 (\cf5 "No Hands"\cf3 );\
    handsvector.\cf9 push_back\cf3 (\cf5 "Multi"\cf3 );\
    \
    colorsvector.\cf9 push_back\cf3 (\cf5 "Visuals"\cf3 );\
    colorsvector.\cf9 push_back\cf3 (\cf5 "CT Colors"\cf3 );\
    colorsvector.\cf9 push_back\cf3 (\cf5 "T Colors"\cf3 );\
    colorsvector.\cf9 push_back\cf3 (\cf5 "Other Colors"\cf3 );\
    \
    \
    \cf6 draw\cf3 ->\cf6 RectOutlined\cf3 (x, y, w, h, \cf8 1\cf3 , \cf6 ControlColor\cf3 , \cf6 MenuOrange\cf3 );\
    \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 180\cf3 , y + \cf8 1\cf3 , \cf6 FontColor\cf3 , \cf6 mFont\cf3 , \cf5 "Visuals"\cf3 );\
    \
    \cf6 draw\cf3 ->\cf6 drawline\cf3 (x, y + \cf8 20\cf3 , x + \cf8 400\cf3 , y + \cf8 20\cf3 , \cf6 MenuOrange\cf3 );\
    \cf6 draw\cf3 ->\cf6 drawline\cf3 (x + \cf8 200\cf3 , y + \cf8 20\cf3 , x + \cf8 200\cf3 , y + \cf8 200\cf3 , \cf6 MenuOrange\cf3 );\
    \
    \
    \cf2 // Left side / esp\cf3 \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 10\cf3 , y + \cf8 25\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Enabled"\cf3 );\
    \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 170\cf3 , y + \cf8 25\cf3 , &\cf6 vars\cf3 .\cf6 visuals\cf3 .\cf6 enabled\cf3 );\
    \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 10\cf3 , y + \cf8 50\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Enemy Only"\cf3 );\
    \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 170\cf3 , y + \cf8 50\cf3 , &\cf6 vars\cf3 .\cf6 visuals\cf3 .\cf6 enemyonly\cf3 );\
    \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 10\cf3 , y + \cf8 75\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Box"\cf3 );\
    \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 170\cf3 , y + \cf8 75\cf3 , &\cf6 vars\cf3 .\cf6 visuals\cf3 .\cf6 box\cf3 );\
    \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 10\cf3 , y + \cf8 100\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Name"\cf3 );\
    \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 170\cf3 , y + \cf8 100\cf3 , &\cf6 vars\cf3 .\cf6 visuals\cf3 .\cf6 name\cf3 );\
    \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 10\cf3 , y + \cf8 125\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Health"\cf3 );\
    \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 170\cf3 , y + \cf8 125\cf3 , &\cf6 vars\cf3 .\cf6 visuals\cf3 .\cf6 healthtext\cf3 );\
    \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 10\cf3 , y + \cf8 150\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Snaplines"\cf3 );\
    \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 170\cf3 , y + \cf8 150\cf3 , &\cf6 vars\cf3 .\cf6 visuals\cf3 .\cf6 snapline\cf3 );\
    \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 10\cf3 , y + \cf8 175\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Skeleton"\cf3 );\
    \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 170\cf3 , y + \cf8 175\cf3 , &\cf6 vars\cf3 .\cf6 visuals\cf3 .\cf6 skeleton\cf3 );\
    \
\
    \cf2 // Right side / Chams\cf3 \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 210\cf3 , y + \cf8 25\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Chams"\cf3 );\
    \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 200\cf3  + \cf8 60\cf3 , y + \cf8 25\cf3 , &\cf6 vars\cf3 .\cf6 visuals\cf3 .\cf6 chams\cf3 );\
    \cf7 this\cf3 ->\cf6 renderCombo\cf3 (x + \cf8 190\cf3  + \cf8 100\cf3 , y + \cf8 25\cf3 , \cf8 100\cf3 , \cf8 20\cf3 , \cf5 "Lit"\cf3 , chamsvector, \cf6 vars\cf3 .\cf6 visuals\cf3 .\cf6 playersType\cf3 , &\cf6 vars\cf3 .\cf6 players_opend\cf3 );\
    \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 210\cf3 , y + \cf8 60\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Hands"\cf3 );\
    \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 200\cf3  + \cf8 60\cf3 , y + \cf8 60\cf3 , &\cf6 vars\cf3 .\cf6 visuals\cf3 .\cf6 handchams\cf3 );\
    \
    \cf7 if\cf3 (!\cf6 vars\cf3 .\cf6 players_opend\cf3 )\
        \cf7 this\cf3 ->\cf6 renderCombo\cf3 (x + \cf8 190\cf3  + \cf8 100\cf3 , y + \cf8 60\cf3 , \cf8 100\cf3 , \cf8 20\cf3 , \cf5 "Lit"\cf3 , handsvector, \cf6 vars\cf3 .\cf6 visuals\cf3 .\cf6 handsType\cf3 , &\cf6 vars\cf3 .\cf6 hands_opend\cf3 );\
\
    \cf7 if\cf3 (!\cf6 vars\cf3 .\cf6 hands_opend\cf3 ) \{\
        \
        \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 210\cf3  + \cf8 80\cf3  - \cf8 3\cf3 , y + \cf8 90\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "shair"\cf3 );\
        \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 210\cf3  + \cf8 80\cf3  - \cf8 3\cf3 , y + \cf8 140\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "ecoil"\cf3 );\
        \
        \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 200\cf3  + \cf8 170\cf3 , y + \cf8 90\cf3 , &\cf6 vars\cf3 .\cf6 visuals\cf3 .\cf6 crosshair\cf3 );\
        \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 200\cf3  + \cf8 170\cf3 , y + \cf8 115\cf3 , &\cf6 vars\cf3 .\cf6 misc\cf3 .\cf6 norecoil\cf3 );\
        \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 200\cf3  + \cf8 170\cf3 , y + \cf8 140\cf3 , &\cf6 vars\cf3 .\cf6 misc\cf3 .\cf6 novisualrecoil\cf3 );\
        \
    \}\
    \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 210\cf3 , y + \cf8 90\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Recoil Cros"\cf3 ); \cf2 // shair\cf3 \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 210\cf3 , y + \cf8 115\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "No Recoil"\cf3 );\
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 210\cf3 , y + \cf8 140\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "No Visual R"\cf3 ); \cf2 // ecoil\cf3 \
    \
    \
    \cf7 this\cf3 ->\cf6 renderCombo\cf3 (x + \cf8 240\cf3 , y + \cf8 170\cf3 , \cf8 120\cf3 , \cf8 20\cf3 , \cf5 "Visuals"\cf3 , colorsvector, \cf6 tab\cf3 .\cf6 colTab\cf3 , &\cf6 vars\cf3 .\cf6 colors_opend\cf3 );\
    \
    \cf7 if\cf3 (\cf6 tab\cf3 .\cf6 colTab\cf3  != \cf8 0\cf3 )\
        \cf6 tab\cf3 .\cf6 colorstab\cf3  = \cf7 true\cf3 ;\
    \cf7 else\cf3 \
        \cf6 tab\cf3 .\cf6 colorstab\cf3  = \cf7 false\cf3 ;\
    \
\}\
\
\
\cf7 void\cf3  \cf6 cMenu\cf3 ::renderMisc(\cf7 int\cf3  x, \cf7 int\cf3  y, \cf7 int\cf3  w, \cf7 int\cf3  h) \{\
    \
    \cf6 draw\cf3 ->\cf6 RectOutlined\cf3 (x, y, w, h, \cf8 1\cf3 , \cf6 ControlColor\cf3 , \cf6 MenuOrange\cf3 );\
    \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 180\cf3 , y + \cf8 1\cf3 , \cf6 FontColor\cf3 , \cf6 mFont\cf3 , \cf5 "Misc"\cf3 );\
    \cf6 draw\cf3 ->\cf6 drawline\cf3 (x, y + \cf8 20\cf3 , x + w, y + \cf8 20\cf3 , \cf6 MenuOrange\cf3 );\
    \cf6 draw\cf3 ->\cf6 drawline\cf3 (x + \cf8 200\cf3 , y + \cf8 20\cf3 , x + \cf8 200\cf3 , y + \cf8 200\cf3 , \cf6 MenuOrange\cf3 );\
    \
    \cf2 // Left side\cf3 \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 10\cf3 , y + \cf8 25\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Bhop"\cf3 );\
    \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 170\cf3 , y + \cf8 25\cf3 , &\cf6 vars\cf3 .\cf6 misc\cf3 .\cf6 bhop\cf3 );\
    \
    \cf7 this\cf3 ->\cf6 renderSlider\cf3 (x + \cf8 10\cf3 , y + \cf8 55\cf3 , \cf8 180\cf3 , \cf5 "FOV"\cf3 , \cf6 vars\cf3 .\cf6 misc\cf3 .\cf6 fov\cf3 , \cf8 70\cf3 , \cf8 0\cf3 );\
    \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 10\cf3 , y + \cf8 80\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Clan Tag"\cf3 );\
    \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 170\cf3 , y + \cf8 80\cf3 , &\cf6 vars\cf3 .\cf6 misc\cf3 .\cf6 clantag\cf3 );\
    \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 10\cf3 , y + \cf8 105\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Air Stuck"\cf3 );\
    \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 170\cf3 , y + \cf8 105\cf3 , &\cf6 vars\cf3 .\cf6 misc\cf3 .\cf6 airstuck\cf3 );\
    \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 10\cf3 , y + \cf8 130\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Show Ranks"\cf3 );\
    \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 170\cf3 , y + \cf8 130\cf3 , &\cf6 vars\cf3 .\cf6 misc\cf3 .\cf6 showrank\cf3 );\
    \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 10\cf3 , y + \cf8 155\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "No Flash"\cf3 );\
    \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 170\cf3 , y + \cf8 155\cf3 , &\cf6 vars\cf3 .\cf6 misc\cf3 .\cf6 noflash\cf3 );\
    \
\
    \cf2 // Right side\cf3 \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 210\cf3 , y + \cf8 25\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Auto Strafe"\cf3 );\
    \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 370\cf3 , y + \cf8 25\cf3 , &\cf6 vars\cf3 .\cf6 misc\cf3 .\cf6 autostrafe\cf3 );\
    \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 210\cf3 , y + \cf8 50\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Circle Strafe"\cf3 );\
    \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 370\cf3 , y + \cf8 50\cf3 , &\cf6 vars\cf3 .\cf6 misc\cf3 .\cf6 circlestrafe\cf3 );\
    \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 210\cf3 , y + \cf8 75\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Anti Untrust"\cf3 );\
    \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 370\cf3 , y + \cf8 75\cf3 , &\cf6 vars\cf3 .\cf6 misc\cf3 .\cf6 antiuntrust\cf3 );\
    \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 210\cf3 , y + \cf8 100\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Walkbot"\cf3 );\
    \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 370\cf3 , y + \cf8 100\cf3 , &\cf6 vars\cf3 .\cf6 test\cf3 .\cf6 walk\cf3 );\
    \
    \
\}\
\
\cf7 void\cf3  \cf6 cMenu\cf3 ::renderPlayer(\cf7 int\cf3  x, \cf7 int\cf3  y, \cf7 int\cf3  w, \cf7 int\cf3  h) \{\
    \
    \cf6 draw\cf3 ->\cf6 RectOutlined\cf3 (x, y, w, h, \cf8 1\cf3 , \cf6 ControlColor\cf3 , \cf6 MenuOrange\cf3 );\
    \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 130\cf3 , y + \cf8 1\cf3 , \cf6 FontColor\cf3 , \cf6 mFont\cf3 , \cf5 "Player list"\cf3 );\
    \cf6 draw\cf3 ->\cf6 drawline\cf3 (x, y + \cf8 20\cf3 , x + w, y + \cf8 20\cf3 , \cf6 MenuOrange\cf3 );\
    \
    \
    \
    \cf9 vector\cf3 <\cf9 string\cf3 > PitchResolver, YawResolver;\
    \
    PitchResolver.\cf9 push_back\cf3 (\cf5 "Auto"\cf3 );\
    PitchResolver.\cf9 push_back\cf3 (\cf5 "Down"\cf3 );\
    PitchResolver.\cf9 push_back\cf3 (\cf5 "Up"\cf3 );\
    \
    YawResolver.\cf9 push_back\cf3 (\cf5 "Auto"\cf3 );\
    YawResolver.\cf9 push_back\cf3 (\cf5 "Half Left"\cf3 );\
    YawResolver.\cf9 push_back\cf3 (\cf5 "Half Right"\cf3 );\
    YawResolver.\cf9 push_back\cf3 (\cf5 "Jitter"\cf3 );\
    YawResolver.\cf9 push_back\cf3 (\cf5 "Spin"\cf3 );\
    YawResolver.\cf9 push_back\cf3 (\cf5 "Lower Body"\cf3 );\
    YawResolver.\cf9 push_back\cf3 (\cf5 "45 Step"\cf3 );\
    \
    \cf7 char\cf3  plinfo[\cf8 255\cf3 ];\
    \
    \cf7 auto\cf3 * local = \cf6 pEntList\cf3 ->\cf6 GetClientEntity\cf3 (\cf6 pEngine\cf3 ->\cf6 GetLocalPlayer\cf3 ());\
    \
    \cf7 for\cf3 (\cf7 int\cf3  i = \cf8 1\cf3 ; i < \cf8 64\cf3 ; i++) \{\
        \
        \cf7 auto\cf3 * entity = \cf6 pEntList\cf3 ->\cf6 GetClientEntity\cf3 (i);\
        \
        \cf7 if\cf3 (!entity)\
            \cf7 continue\cf3 ;\
        \
        \cf7 if\cf3 (entity == local)\
            \cf7 continue\cf3 ;\
        \
        \cf7 if\cf3 (entity->\cf6 GetTeam\cf3 () == local->\cf6 GetTeam\cf3 ())\
            \cf7 continue\cf3 ;\
        \
        \cf7 if\cf3 (entity->\cf6 GetTeam\cf3 () != \cf8 2\cf3  && entity->\cf6 GetTeam\cf3 () != \cf8 3\cf3 )\
            \cf7 continue\cf3 ;\
        \
        \
        \cf6 player_info_t\cf3  info;\
        \cf6 pEngine\cf3 ->\cf6 GetPlayerInfo\cf3 (i, &info);\
        \
        \
        \cf2 //if(bPadding == vars.playerTab) \{\cf3 \
            \cf9 sprintf\cf3 (plinfo, \cf5 "Player info for : %s with index %i"\cf3 , info.\cf6 name\cf3 , entity->\cf6 GetIndex\cf3 ());\
            \
            \cf7 this\cf3 ->\cf6 renderButton\cf3 (x + \cf8 10\cf3 , y + \cf8 30\cf3 , \cf8 90\cf3 , \cf8 20\cf3 , info.\cf6 name\cf3 );\
            \
            \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 200\cf3 , y + \cf8 50\cf3 , &\cf6 gCorrections\cf3 [entity->\cf6 GetIndex\cf3 ()].\cf6 resolved\cf3 ); \cf2 // Resolve\cf3 \
            \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 200\cf3 , y + \cf8 75\cf3 , &\cf6 gCorrections\cf3 [entity->\cf6 GetIndex\cf3 ()].\cf6 whitelist\cf3 ); \cf2 // Whitelist\cf3 \
            \
            \cf7 this\cf3 ->\cf6 renderCombo\cf3 (x + \cf8 200\cf3 , y + \cf8 100\cf3 , \cf8 90\cf3 , \cf8 20\cf3 , \cf5 "Pitch"\cf3 , PitchResolver, \cf6 gCorrections\cf3 [entity->\cf6 GetIndex\cf3 ()].\cf6 dropdown_x\cf3 , &\cf6 vars\cf3 .\cf6 playerlist_opend_x\cf3 [entity->\cf6 GetIndex\cf3 ()]);\
            \
            \cf7 this\cf3 ->\cf6 renderCombo\cf3 (x + \cf8 200\cf3  + \cf8 100\cf3 , y + \cf8 100\cf3 , \cf8 90\cf3 , \cf8 20\cf3 , \cf5 "Yaw"\cf3 , YawResolver,  \cf6 gCorrections\cf3 [entity->\cf6 GetIndex\cf3 ()].\cf6 dropdown_y\cf3 , &\cf6 vars\cf3 .\cf6 playerlist_opend_y\cf3 [entity->\cf6 GetIndex\cf3 ()]);\
\
        \cf2 //\}\cf3 \
        \
    \}\
    \
\}\
\
\cf7 void\cf3  \cf6 cMenu\cf3 ::renderColors(\cf7 int\cf3  x, \cf7 int\cf3  y, \cf7 int\cf3  w, \cf7 int\cf3  h) \{\
    \
    \cf6 draw\cf3 ->\cf6 RectOutlined\cf3 (x, y, w, h, \cf8 1\cf3 , \cf6 ControlColor\cf3 , \cf6 MenuOrange\cf3 );\
    \
    \cf7 if\cf3 (\cf6 tab\cf3 .\cf6 colTab\cf3  == \cf8 1\cf3 )\
        \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 80\cf3 , y + \cf8 1\cf3 , \cf6 FontColor\cf3 , \cf6 mFont\cf3 , \cf5 "CT Colors"\cf3 );\
    \
    \cf7 if\cf3 (\cf6 tab\cf3 .\cf6 colTab\cf3  == \cf8 2\cf3 )\
       \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 80\cf3 , y + \cf8 1\cf3 , \cf6 FontColor\cf3 , \cf6 mFont\cf3 , \cf5 "T Colors"\cf3 );\
    \
    \cf7 if\cf3 (\cf6 tab\cf3 .\cf6 colTab\cf3  == \cf8 3\cf3 )\
        \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 75\cf3 , y + \cf8 1\cf3 , \cf6 FontColor\cf3 , \cf6 mFont\cf3 , \cf5 "Other Colors"\cf3 );\
    \
    \cf6 draw\cf3 ->\cf6 drawline\cf3 (x, y + \cf8 20\cf3 , x + w, y + \cf8 20\cf3 , \cf6 MenuOrange\cf3 );\
    \
    \
    \
    \cf7 if\cf3 (\cf6 tab\cf3 .\cf6 colTab\cf3  == \cf8 1\cf3 ) \{\
        \
        \cf6 draw\cf3 ->\cf6 drawcolorpicker\cf3 (x + \cf8 10\cf3 , y + \cf8 40\cf3 , \cf5 "CT Chams"\cf3 , \cf6 vars\cf3 .\cf6 colors\cf3 .\cf6 ctchams\cf3 , \cf8 0\cf3 );\
        \cf6 draw\cf3 ->\cf6 drawcolorpicker\cf3 (x + \cf8 10\cf3 , y + \cf8 190\cf3 , \cf5 "CT Box"\cf3 , \cf6 vars\cf3 .\cf6 colors\cf3 .\cf6 ctbox\cf3 , \cf8 0\cf3 );\
        \
        \cf6 draw\cf3 ->\cf6 drawcolorpicker\cf3 (x + \cf8 170\cf3 , y + \cf8 40\cf3 , \cf5 "CT Chams Ignore"\cf3 , \cf6 vars\cf3 .\cf6 colors\cf3 .\cf6 ctchams_ign\cf3 , \cf8 0\cf3 );\
        \cf6 draw\cf3 ->\cf6 drawcolorpicker\cf3 (x + \cf8 170\cf3 , y + \cf8 190\cf3 , \cf5 "CT Box Ignore"\cf3 , \cf6 vars\cf3 .\cf6 colors\cf3 .\cf6 ctbox_ign\cf3 , \cf8 0\cf3 );\
        \
    \}\
    \
    \
    \cf7 if\cf3 (\cf6 tab\cf3 .\cf6 colTab\cf3  == \cf8 2\cf3 ) \{\
        \
        \cf6 draw\cf3 ->\cf6 drawcolorpicker\cf3 (x + \cf8 10\cf3 , y + \cf8 40\cf3 , \cf5 "T Chams"\cf3 , \cf6 vars\cf3 .\cf6 colors\cf3 .\cf6 tchams\cf3 , \cf8 0\cf3 );\
        \cf6 draw\cf3 ->\cf6 drawcolorpicker\cf3 (x + \cf8 10\cf3 , y + \cf8 190\cf3 , \cf5 "T Box"\cf3 , \cf6 vars\cf3 .\cf6 colors\cf3 .\cf6 tbox\cf3 , \cf8 0\cf3 );\
        \
        \cf6 draw\cf3 ->\cf6 drawcolorpicker\cf3 (x + \cf8 170\cf3 , y + \cf8 40\cf3 , \cf5 "T Chams Ignore"\cf3 , \cf6 vars\cf3 .\cf6 colors\cf3 .\cf6 tchams_ign\cf3 , \cf8 0\cf3 );\
        \cf6 draw\cf3 ->\cf6 drawcolorpicker\cf3 (x + \cf8 170\cf3 , y + \cf8 190\cf3 , \cf5 "T Box Ignore"\cf3 , \cf6 vars\cf3 .\cf6 colors\cf3 .\cf6 tbox_ign\cf3 , \cf8 0\cf3 );\
        \
    \}\
    \
    \
    \cf7 if\cf3 (\cf6 tab\cf3 .\cf6 colTab\cf3  == \cf8 3\cf3 ) \{\
        \
        \cf9 vector\cf3 <\cf9 string\cf3 > CrosshairType, CrosshairColor, weaponsvector;\
        \
        CrosshairType.\cf9 push_back\cf3 (\cf5 "+"\cf3 );\
        CrosshairType.\cf9 push_back\cf3 (\cf5 "x"\cf3 );\
        CrosshairType.\cf9 push_back\cf3 (\cf5 "[]"\cf3 );\
        \
        CrosshairColor.\cf9 push_back\cf3 (\cf5 "Green"\cf3 );\
        CrosshairColor.\cf9 push_back\cf3 (\cf5 "Magenta"\cf3 );\
        CrosshairColor.\cf9 push_back\cf3 (\cf5 "White"\cf3 );\
        CrosshairColor.\cf9 push_back\cf3 (\cf5 "Blue"\cf3 );\
        CrosshairColor.\cf9 push_back\cf3 (\cf5 "Red"\cf3 );\
        \
        weaponsvector.\cf9 push_back\cf3 (\cf5 "Lit"\cf3 );\
        weaponsvector.\cf9 push_back\cf3 (\cf5 "Texture"\cf3 );\
        weaponsvector.\cf9 push_back\cf3 (\cf5 "WireFrame"\cf3 );\
        weaponsvector.\cf9 push_back\cf3 (\cf5 "No Weapon"\cf3 );\
        weaponsvector.\cf9 push_back\cf3 (\cf5 "Multi"\cf3 );\
        \
        \cf6 draw\cf3 ->\cf6 drawcolorpicker\cf3 (x + \cf8 10\cf3 , y + \cf8 40\cf3 , \cf5 "Hands"\cf3 , \cf6 vars\cf3 .\cf6 colors\cf3 .\cf6 hands\cf3 , \cf8 0\cf3 );\
        \cf6 draw\cf3 ->\cf6 drawcolorpicker\cf3 (x + \cf8 10\cf3 , y + \cf8 190\cf3 , \cf5 "Hands Ignore"\cf3 , \cf6 vars\cf3 .\cf6 colors\cf3 .\cf6 hands_ign\cf3 , \cf8 0\cf3 );\
        \
        \
        \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 150\cf3 , y + \cf8 25\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Weapons Chams"\cf3 );\
        \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 280\cf3 , y + \cf8 25\cf3 , &\cf6 vars\cf3 .\cf6 visuals\cf3 .\cf6 weaponchams\cf3 );\
        \cf7 this\cf3 ->\cf6 renderCombo\cf3 (x + \cf8 200\cf3 , y + \cf8 50\cf3 , \cf8 100\cf3 , \cf8 20\cf3 , \cf5 "Lit"\cf3 , weaponsvector, \cf6 vars\cf3 .\cf6 visuals\cf3 .\cf6 weaponType\cf3 , &\cf6 vars\cf3 .\cf6 weapon_opend\cf3 );\
            \
        \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 170\cf3 , y + \cf8 200\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Crosshair type"\cf3 );\
        \cf7 this\cf3 ->\cf6 renderCombo\cf3 (x + \cf8 170\cf3 , y + \cf8 225\cf3 , \cf8 100\cf3 , \cf8 20\cf3 , \cf5 "+"\cf3 , CrosshairType, \cf6 vars\cf3 .\cf6 misc\cf3 .\cf6 crosshairType\cf3 , &\cf6 vars\cf3 .\cf6 crossT_opend\cf3 );\
            \
        \cf7 if\cf3 (!\cf6 vars\cf3 .\cf6 crossT_opend\cf3 ) \{\
                \
            \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 170\cf3 , y + \cf8 250\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Crossair Colour"\cf3 );\
            \cf7 this\cf3 ->\cf6 renderCombo\cf3 (x + \cf8 170\cf3 , y + \cf8 275\cf3 , \cf8 100\cf3 , \cf8 20\cf3 , \cf5 "Green"\cf3 , CrosshairColor, \cf6 vars\cf3 .\cf6 colors\cf3 .\cf6 cColor\cf3 , &\cf6 vars\cf3 .\cf6 crossC_opend\cf3 );\
                \
        \}\
        \
    \}\
    \
\}\
\
\cf7 void\cf3  \cf6 cMenu\cf3 ::renderAntiAim(\cf7 int\cf3  x, \cf7 int\cf3  y, \cf7 int\cf3  w, \cf7 int\cf3  h) \{\
    \
    \cf6 draw\cf3 ->\cf6 RectOutlined\cf3 (x, y, w, h, \cf8 1\cf3 , \cf6 ControlColor\cf3 , \cf6 MenuOrange\cf3 );\
    \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 80\cf3 , y + \cf8 1\cf3 , \cf6 FontColor\cf3 , \cf6 mFont\cf3 , \cf5 "Anti Aim"\cf3 );\
    \cf6 draw\cf3 ->\cf6 drawline\cf3 (x, y + \cf8 20\cf3 , x + w, y + \cf8 20\cf3 , \cf6 MenuOrange\cf3 );\
    \
    \cf9 vector\cf3 <\cf9 string\cf3 > antiaim_pitch, antiaim_yaw;\
    \
    antiaim_pitch.\cf9 push_back\cf3 (\cf5 "Off"\cf3 );\
    antiaim_pitch.\cf9 push_back\cf3 (\cf5 "Emotion"\cf3 );\
    antiaim_pitch.\cf9 push_back\cf3 (\cf5 "Up"\cf3 );\
    \
    antiaim_yaw.\cf9 push_back\cf3 (\cf5 "Off"\cf3 );\
    antiaim_yaw.\cf9 push_back\cf3 (\cf5 "Backwards"\cf3 );\
    antiaim_yaw.\cf9 push_back\cf3 (\cf5 "Jitter"\cf3 );\
    antiaim_yaw.\cf9 push_back\cf3 (\cf5 "FJitter"\cf3 );\
    antiaim_yaw.\cf9 push_back\cf3 (\cf5 "Slow Spin"\cf3 );\
    antiaim_yaw.\cf9 push_back\cf3 (\cf5 "Fast Spin"\cf3 );\
    antiaim_yaw.\cf9 push_back\cf3 (\cf5 "Lower Yaw"\cf3 );\
    antiaim_yaw.\cf9 push_back\cf3 (\cf5 "Side Left"\cf3 );\
    antiaim_yaw.\cf9 push_back\cf3 (\cf5 "Side Right"\cf3 );\
    antiaim_yaw.\cf9 push_back\cf3 (\cf5 "Custom"\cf3 );\
    \
    \cf7 if\cf3 (!\cf6 vars\cf3 .\cf6 misc\cf3 .\cf6 antiuntrust\cf3 ) \{\
        antiaim_pitch.\cf9 push_back\cf3 (\cf5 "Lag Down"\cf3 );\
        antiaim_pitch.\cf9 push_back\cf3 (\cf5 "Fakedown"\cf3 );\
        antiaim_pitch.\cf9 push_back\cf3 (\cf5 "Custom"\cf3 );\
    \}\
\
    \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 10\cf3 , y + \cf8 25\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Anti Aim X"\cf3 );\
    \cf7 this\cf3 ->\cf6 renderCombo\cf3 (x + \cf8 90\cf3 , y + \cf8 25\cf3 , \cf8 100\cf3 , \cf8 20\cf3 , \cf5 "Off"\cf3 , antiaim_pitch, \cf6 vars\cf3 .\cf6 misc\cf3 .\cf6 aaX\cf3 , &\cf6 vars\cf3 .\cf6 aaX_opend\cf3 );\
    \
    \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 10\cf3 , y + \cf8 50\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Anti Aim Y"\cf3 );\
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 10\cf3 , y + \cf8 75\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "At Targets"\cf3 );\
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 10\cf3 , y + \cf8 100\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Fake"\cf3 );\
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 10\cf3 , y + \cf8 125\cf3 , \cf6 FontColor\cf3 , \cf6 fontMenu\cf3 , \cf5 "Thridperson"\cf3 );\
    \
    \
    \cf7 if\cf3 (!\cf6 vars\cf3 .\cf6 aaX_opend\cf3 ) \{\
        \
        \cf7 this\cf3 ->\cf6 renderCombo\cf3 (x + \cf8 90\cf3 , y + \cf8 50\cf3 , \cf8 100\cf3 , \cf8 20\cf3 , \cf5 "Off"\cf3 , antiaim_yaw, \cf6 vars\cf3 .\cf6 misc\cf3 .\cf6 aaY\cf3 , &\cf6 vars\cf3 .\cf6 aaY_opend\cf3 );\
        \
        \cf7 if\cf3 (!\cf6 vars\cf3 .\cf6 aaY_opend\cf3 )\
            \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 170\cf3 , y + \cf8 75\cf3 , &\cf6 vars\cf3 .\cf6 misc\cf3 .\cf6 attargets\cf3 );\
        \
    \}\
    \cf7 if\cf3 ((\cf6 vars\cf3 .\cf6 misc\cf3 .\cf6 antiuntrust\cf3  || (!\cf6 vars\cf3 .\cf6 aaX_opend\cf3  && !\cf6 vars\cf3 .\cf6 misc\cf3 .\cf6 antiuntrust\cf3 )) && !\cf6 vars\cf3 .\cf6 aaY_opend\cf3 ) \{\
        \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 170\cf3 , y + \cf8 100\cf3 , &\cf6 vars\cf3 .\cf6 misc\cf3 .\cf6 fakeaa\cf3 );\
        \cf7 this\cf3 ->\cf6 renderCheckbox\cf3 (x + \cf8 170\cf3 , y + \cf8 125\cf3 , &\cf6 vars\cf3 .\cf6 misc\cf3 .\cf6 thirdpersonmode\cf3 );\
    \}\
    \
    \
    \cf7 if\cf3 (\cf6 vars\cf3 .\cf6 misc\cf3 .\cf6 aaX\cf3  == \cf8 5\cf3 )\
        \cf7 this\cf3 ->\cf6 renderSlider\cf3 (x + \cf8 10\cf3 , y + \cf8 150\cf3 , \cf8 180\cf3 , \cf5 "Pitch"\cf3 , \cf6 vars\cf3 .\cf6 misc\cf3 .\cf6 customaa\cf3 , \cf8 180\cf3 , \cf8 0\cf3 );\
    \
    \cf7 if\cf3 (\cf6 vars\cf3 .\cf6 misc\cf3 .\cf6 aaY\cf3  == \cf8 9\cf3 ) \{\
        \cf7 this\cf3 ->\cf6 renderSlider\cf3 (x + \cf8 10\cf3 , y + \cf8 175\cf3 , \cf8 180\cf3 , \cf5 "Fake Yaw"\cf3 , \cf6 vars\cf3 .\cf6 misc\cf3 .\cf6 fakeyaw\cf3 , \cf8 180\cf3 , \cf8 0\cf3 );\
        \cf7 this\cf3 ->\cf6 renderSlider\cf3 (x + \cf8 10\cf3 , y + \cf8 200\cf3 , \cf8 180\cf3 , \cf5 "Real Yaw"\cf3 , \cf6 vars\cf3 .\cf6 misc\cf3 .\cf6 realyaw\cf3 , \cf8 180\cf3 , \cf8 0\cf3 );\
    \}\
    \
\}\
\
\
\cf2 //=======================Menu==========================//\cf3 \
\
\cf7 void\cf3  \cf6 cMenu\cf3 ::renderMenu() \{\
    \
    \cf7 int\cf3  wScreen, hScreen;\
    \cf6 pEngine\cf3 ->\cf6 GetScreenSize\cf3 (wScreen, hScreen);\
    \
    \
    \cf2 // Tab menu measurements\cf3 \
    \cf7 static\cf3  \cf7 int\cf3  x = \cf8 25\cf3 ;\
    \cf7 static\cf3  \cf7 int\cf3  y = \cf8 325\cf3 ;\
    \cf7 int\cf3  w = \cf8 100\cf3 ;\
    \cf7 int\cf3  h = \cf8 185\cf3 ;\
    \cf7 int\cf3  hh = \cf8 20\cf3 ;\
    \cf7 int\cf3  xx = x + w;\
    \cf7 int\cf3  tabSize = \cf8 40\cf3 ;\
    \cf7 int\cf3  taby = y + \cf8 22\cf3 ;\
    \
    \cf2 // Aim tab measurements\cf3 \
    \cf7 static\cf3  \cf7 int\cf3  aimX = \cf8 150\cf3 ;\
    \cf7 static\cf3  \cf7 int\cf3  aimY = \cf8 325\cf3 ;\
    \cf7 int\cf3  aimW = \cf8 200\cf3 ;\
    \cf7 int\cf3  aimH = \cf8 285\cf3 ;\
    \
    \cf2 // Vis tab measurements\cf3 \
    \cf7 static\cf3  \cf7 int\cf3  visX = \cf8 350\cf3 ;\
    \cf7 static\cf3  \cf7 int\cf3  visY = \cf8 50\cf3 ;\
    \cf7 int\cf3  visW = \cf8 400\cf3 ;\
    \cf7 int\cf3  visH = \cf8 200\cf3 ;\
    \
    \cf2 // Misc tab measurements\cf3 \
    \cf7 static\cf3  \cf7 int\cf3  miscX = \cf8 775\cf3 ;\
    \cf7 static\cf3  \cf7 int\cf3  miscY = \cf8 325\cf3 ;\
    \cf7 int\cf3  miscW = \cf8 400\cf3 ;\
    \cf7 int\cf3  miscH = \cf8 200\cf3 ;\
    \
    \cf2 // Player tab measurements\cf3 \
    \cf7 static\cf3  \cf7 int\cf3  playerX = \cf8 450\cf3 ;\
    \cf7 static\cf3  \cf7 int\cf3  playerY = \cf8 550\cf3 ;\
    \cf7 int\cf3  playerW = \cf8 300\cf3 ;\
    \cf7 int\cf3  playerH = \cf8 200\cf3 ;\
    \
    \cf2 // Colours tab measurements\cf3 \
    \cf7 static\cf3  \cf7 int\cf3  colorsX = \cf8 800\cf3 ;\
    \cf7 static\cf3  \cf7 int\cf3  colorsY = visY;\
    \cf7 int\cf3  colorsW = \cf8 310\cf3 ;\
    \cf7 int\cf3  colorsH = \cf8 315\cf3 ;\
    \
    \cf2 // Anti aim tab measurements\cf3 \
    \cf7 static\cf3  \cf7 int\cf3  antiX = aimX + aimW + \cf8 25\cf3 ;\
    \cf7 static\cf3  \cf7 int\cf3  antiY = aimY;\
    \cf7 int\cf3  antiW = \cf8 200\cf3 ;\
    \cf7 int\cf3  antiH = \cf8 225\cf3 ;\
    \
    \cf2 // Just to make things easier\cf3 \
    \cf7 bool\cf3  inAim  = \cf6 draw\cf3 ->\cf6 inArea\cf3 (x, taby, w, tabSize);\
    \cf7 bool\cf3  inVis  = \cf6 draw\cf3 ->\cf6 inArea\cf3 (x, taby + \cf8 40\cf3 , w, tabSize);\
    \cf7 bool\cf3  inMisc = \cf6 draw\cf3 ->\cf6 inArea\cf3 (x, taby + \cf8 80\cf3 , w, tabSize);\
    \cf7 bool\cf3  inPlayer = \cf6 draw\cf3 ->\cf6 inArea\cf3 (x, taby + \cf8 120\cf3 , w, tabSize);\
    \
    \
    \cf2 // Draws Background\cf3 \
    \cf6 draw\cf3 ->\cf6 RectOutlined\cf3 (x, y, w, h, \cf8 1\cf3 , \cf6 ControlColor\cf3 , \cf6 MenuOrange\cf3 );\
    \cf6 draw\cf3 ->\cf6 drawline\cf3 (x, y + \cf8 21\cf3 , xx, y + \cf8 21\cf3 , \cf6 MenuOrange\cf3 );\
    \
    \cf2 // When hovering over the tab it changes colour\cf3 \
    \cf7 if\cf3 (inAim)\
        \cf6 draw\cf3 ->\cf6 fillrgba\cf3 (x, taby, w, tabSize, \cf6 Color\cf3 (\cf8 255\cf3 , \cf8 136\cf3 , \cf8 57\cf3 , \cf8 150\cf3 ));\
    \cf7 if\cf3 (inVis)\
        \cf6 draw\cf3 ->\cf6 fillrgba\cf3 (x, taby + \cf8 40\cf3 , w, tabSize, \cf6 Color\cf3 (\cf8 255\cf3 , \cf8 136\cf3 , \cf8 57\cf3 , \cf8 150\cf3 ));\
    \cf7 if\cf3 (inMisc)\
        \cf6 draw\cf3 ->\cf6 fillrgba\cf3 (x, taby + \cf8 80\cf3 , w, tabSize, \cf6 Color\cf3 (\cf8 255\cf3 , \cf8 136\cf3 , \cf8 57\cf3 , \cf8 150\cf3 ));\
    \cf7 if\cf3 (inPlayer)\
        \cf6 draw\cf3 ->\cf6 fillrgba\cf3 (x, taby + \cf8 120\cf3 , w, tabSize + \cf8 4\cf3 , \cf6 Color\cf3 (\cf8 255\cf3 , \cf8 136\cf3 , \cf8 57\cf3 , \cf8 150\cf3 ));\
    \
    \cf2 // When clicked colour stays\cf3 \
    \cf7 if\cf3 (\cf6 tab\cf3 .\cf6 aimtab\cf3 )\
        \cf6 draw\cf3 ->\cf6 fillrgba\cf3 (x, taby, w, tabSize, \cf6 Color\cf3 (\cf8 255\cf3 , \cf8 136\cf3 , \cf8 57\cf3 , \cf8 255\cf3 ));\
    \cf7 if\cf3 (\cf6 tab\cf3 .\cf6 vistab\cf3 )\
        \cf6 draw\cf3 ->\cf6 fillrgba\cf3 (x, taby + \cf8 40\cf3 , w, tabSize, \cf6 Color\cf3 (\cf8 255\cf3 , \cf8 136\cf3 , \cf8 57\cf3 , \cf8 255\cf3 ));\
    \cf7 if\cf3 (\cf6 tab\cf3 .\cf6 misctab\cf3 )\
        \cf6 draw\cf3 ->\cf6 fillrgba\cf3 (x, taby + \cf8 80\cf3 , w, tabSize, \cf6 Color\cf3 (\cf8 255\cf3 , \cf8 136\cf3 , \cf8 57\cf3 , \cf8 255\cf3 ));\
    \cf7 if\cf3 (\cf6 tab\cf3 .\cf6 playertab\cf3 )\
        \cf6 draw\cf3 ->\cf6 fillrgba\cf3 (x, taby + \cf8 120\cf3 , w, tabSize + \cf8 4\cf3 , \cf6 Color\cf3 (\cf8 255\cf3 , \cf8 136\cf3 , \cf8 57\cf3 , \cf8 255\cf3 ));\
    \
    \cf2 // Draws tab icons\cf3 \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 35\cf3 , y + \cf8 4\cf3 , \cf6 MenuOrange\cf3 , \cf6 mFont\cf3 , \cf5 "vlone"\cf3 );\
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 35\cf3 , y +  \cf8 25\cf3 , \cf6 FontColor\cf3 , \cf6 osFont\cf3 , \cf5 "A"\cf3 );  \cf2 // Aimbot\cf3 \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 32\cf3 , y +  \cf8 65\cf3 , \cf6 FontColor\cf3 , \cf6 osFont\cf3 , \cf5 "B"\cf3 );  \cf2 // Visuals\cf3 \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 35\cf3 , y +  \cf8 105\cf3 , \cf6 FontColor\cf3 , \cf6 osFont\cf3 , \cf5 "C"\cf3 ); \cf2 // Misc\cf3 \
    \cf6 draw\cf3 ->\cf6 drawstring\cf3 (x + \cf8 37\cf3 , y +  \cf8 145\cf3 , \cf6 FontColor\cf3 , \cf6 osFont\cf3 , \cf5 "D"\cf3 ); \cf2 // Player\cf3 \
    \
    \
    \cf7 if\cf3 (inAim && \cf6 WasReleased\cf3 )\
        \cf6 tab\cf3 .\cf6 aimtab\cf3  = !\cf6 tab\cf3 .\cf6 aimtab\cf3 ;\
    \cf7 if\cf3 (inVis && \cf6 WasReleased\cf3 )\
        \cf6 tab\cf3 .\cf6 vistab\cf3  = !\cf6 tab\cf3 .\cf6 vistab\cf3 ;\
    \cf7 if\cf3 (inMisc && \cf6 WasReleased\cf3 )\
        \cf6 tab\cf3 .\cf6 misctab\cf3  = !\cf6 tab\cf3 .\cf6 misctab\cf3 ;\
    \cf7 if\cf3 (inPlayer && \cf6 WasReleased\cf3 )\
        \cf6 tab\cf3 .\cf6 playertab\cf3  = !\cf6 tab\cf3 .\cf6 playertab\cf3 ;\
    \
    \
    \cf7 if\cf3 (\cf6 tab\cf3 .\cf6 aimtab\cf3 ) \{\
        \cf6 renderAim\cf3 (aimX, aimY, aimW, aimH);\
        \cf6 draw\cf3 ->\cf6 MoveMenu\cf3 (aimX, aimY, aimW, hh, \cf8 1\cf3 );    \cf2 // Drag window\cf3 \
    \}\
    \
    \
    \cf7 if\cf3 (\cf6 tab\cf3 .\cf6 vistab\cf3 ) \{\
        \cf6 renderVis\cf3 (visX, visY, visW, visH);\
        \cf6 draw\cf3 ->\cf6 MoveMenu\cf3 (visX, visY, visW, hh, \cf8 2\cf3 );\
    \}\
    \
    \
    \cf7 if\cf3 (\cf6 tab\cf3 .\cf6 misctab\cf3 ) \{\
        \cf6 renderMisc\cf3 (miscX, miscY, miscW, miscH);\
        \cf6 draw\cf3 ->\cf6 MoveMenu\cf3 (miscX, miscY, miscW, hh, \cf8 3\cf3 );\
    \}\
    \
    \
    \cf7 if\cf3 (\cf6 tab\cf3 .\cf6 playertab\cf3 ) \{\
        \cf6 renderPlayer\cf3 (playerX, playerY, playerW, playerH);\
        \cf6 draw\cf3 ->\cf6 MoveMenu\cf3 (playerX, playerY, playerW, hh, \cf8 4\cf3 );\
    \}\
    \
    \
    \cf7 if\cf3 (\cf6 tab\cf3 .\cf6 colorstab\cf3 ) \{\
        \cf6 renderColors\cf3 (colorsX, colorsY, colorsW, colorsH);\
        \cf6 draw\cf3 ->\cf6 MoveMenu\cf3 (colorsX, colorsY, colorsW, hh, \cf8 5\cf3 );\
    \}\
    \
    \
    \cf7 if\cf3 (\cf6 vars\cf3 .\cf6 misc\cf3 .\cf6 anitaim\cf3 ) \{\
        \cf6 renderAntiAim\cf3 (antiX, antiY, antiW, antiH);\
        \cf6 draw\cf3 ->\cf6 MoveMenu\cf3 (antiX, antiY, antiW, hh, \cf8 6\cf3 );\
    \}\
    \
     \
     \
     \cf6 draw\cf3 ->\cf6 MoveMenu\cf3 (x, y, w, hh, \cf8 0\cf3 );    \cf2 // Drag tabs menu\cf3 \
    \
     \cf6 Pressed\cf3 (\cf6 MOUSE_LEFT\cf3 );\
    \
\}\
\
\
}